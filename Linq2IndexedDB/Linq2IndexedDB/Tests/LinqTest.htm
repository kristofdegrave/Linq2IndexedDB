<!DOCTYPE html>  
<html>  
    <head> 
        <title>Tests</title> 
        <link href="qunit.css" rel="stylesheet" type="text/css" /> 
        <script src="../Scripts/jquery-1.7.1.js" type="text/javascript"></script>  
        <script src="qunit.js" type="text/javascript"></script> 
        <script src="../Linq/Linq2IndexedDB.js" type="text/javascript"></script>
        <script type="text/javascript">
            $(document).ready(function () {
                module("Insert Tests");
                test("insert primitive value (1), no key - non existing object store", function () {
                    expect(1);
                    stop();
                    var db = $.indexedDB("Insert Tests")
                    db.deleteDatabase(function () {
                        db.linq().from("test").insert(1, null, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                    });
                });
                test("insert JSON value ({name: 'test'}), no key - non existing object store", function () {
                    expect(1);
                    stop();
                    var db = $.indexedDB("Insert Tests")
                    db.deleteDatabase(function () {
                        db.linq().from("test").insert({ name: "test" }, null, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                    });
                });
                test("insert primitive value (1), key (1) - non existing object store", function () {
                    expect(1);
                    stop();
                    var db = $.indexedDB("Insert Tests")
                    db.deleteDatabase(function () {
                        db.linq().from("test").insert(1, 1, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                    });
                });
                test("insert JSON value ({name: 'test'}), key (1) - non existing object store", function () {
                    expect(1);
                    stop();
                    var db = $.indexedDB("Insert Tests")
                    db.deleteDatabase(function () {
                        db.linq().from("test").insert({ name: "test" }, 1, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                    });
                });
                test("insert primitive value (1), no key - existing object store (KeyPathId: 'id', autoincrement: true)", function () {
                    expect(1);
                    stop();

                    var ObjectStores = [
                         { name: "test", keyPath: "id", autoIncrement: true, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert(1, null, function (data) { ok(false, "insert successfull"); start(); }, function () { ok(true, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test'}), no key - existing object store (KeyPathId: 'id', autoincrement: true)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", keyPath: "id", autoIncrement: true, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test" }, null, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test', id: 1}), no key - existing object store (KeyPathId: 'id', autoincrement: true)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", keyPath: "id", autoIncrement: true, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test", id: 1 }, null, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                        });
                    });
                });
                test("insert primitive value (1), key (1) - existing object store (KeyPathId: 'id', autoincrement: true)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", keyPath: "id", autoIncrement: true, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert(1, 1, function (data) { ok(false, "insert successfull"); start(); }, function () { ok(true, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test'}), key (1) - existing object store (KeyPathId: 'id', autoincrement: true)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", keyPath: "id", autoIncrement: true, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                       db.initialize(function () {
                            db.linq().from("test").insert({ name: "test" }, 1, function (data) { ok(false, "insert successfull"); start(); }, function () { ok(true, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test', id: 1}), key (1) - existing object store (KeyPathId: 'id', autoincrement: true)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", keyPath: "id", autoIncrement: true, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test", id: 1 }, 1, function (data) { ok(false, "insert successfull"); start(); }, function () { ok(true, "insert error"); start(); });
                        });
                    });
                });
                test("insert primitive value (1), no key - existing object store (KeyPathId: 'id', autoincrement: false)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", keyPath: "id", autoIncrement: false, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert(1, null, function (data) { ok(false, "insert successfull"); start(); }, function () { ok(true, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test'}), no key - existing object store (KeyPathId: 'id', autoincrement: false)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", keyPath: "id", autoIncrement: false, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test" }, null, function (data) { ok(false, "insert successfull"); start(); }, function () { ok(true, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test', id: 1}), no key - existing object store (KeyPathId: 'id', autoincrement: false)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", keyPath: "id", autoIncrement: false, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test", id: 1 }, null, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                        });
                    });
                });
                test("insert primitive value (1), key (1) - existing object store (KeyPathId: 'id', autoincrement: false)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", keyPath: "id", autoIncrement: false, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert(1, 1, function (data) { ok(false, "insert successfull"); start(); }, function () { ok(true, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test'}), key (1) - existing object store (KeyPathId: 'id', autoincrement: false)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", keyPath: "id", autoIncrement: false, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test" }, 1, function (data) { ok(false, "insert successfull"); start(); }, function () { ok(true, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test', id: 1}), key (1) - existing object store (KeyPathId: 'id', autoincrement: false)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", keyPath: "id", autoIncrement: false, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test", id: 1 }, 1, function (data) { ok(false, "insert successfull"); start(); }, function () { ok(true, "insert error"); start(); });
                        });
                    });
                });
                test("insert primitive value (1), no key - existing object store (KeyPathId: none, autoincrement: true)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", autoIncrement: true, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert(1, null, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test'}), no key - existing object store (KeyPathId: none, autoincrement: true)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", autoIncrement: true, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test" }, null, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test', id: 1}), no key - existing object store (KeyPathId: none, autoincrement: true)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", autoIncrement: true, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test", id: 1 }, null, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                        });
                    });
                });
                test("insert primitive value (1), key (1) - existing object store (KeyPathId: none, autoincrement: true)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", autoIncrement: true, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert(1, 1, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test'}), key (1) - existing object store (KeyPathId: none, autoincrement: true)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", autoIncrement: true, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test" }, 1, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test', id: 1}), key (1) - existing object store (KeyPathId: none, autoincrement: true)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", autoIncrement: true, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test", id: 1 }, 1, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                        });
                    });
                });
                test("insert primitive value (1), no key - existing object store (KeyPathId: none, autoincrement: false)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", autoIncrement: false, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert(1, null, function (data) { ok(false, "insert successfull"); start(); }, function () { ok(true, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test'}), no key - existing object store (KeyPathId: none, autoincrement: false)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", autoIncrement: false, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test" }, null, function (data) { ok(false, "insert successfull"); start(); }, function () { ok(true, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test', id: 1}), no key - existing object store (KeyPathId: none, autoincrement: false)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", autoIncrement: false, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test", id: 1 }, null, function (data) { ok(false, "insert successfull"); start(); }, function () { ok(true, "insert error"); start(); });
                        });
                    });
                });
                test("insert primitive value (1), key (1) - existing object store (KeyPathId: none, autoincrement: false)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", autoIncrement: false, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert(1, 1, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test'}), key (1) - existing object store (KeyPathId: none, autoincrement: false)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", autoIncrement: false, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test" }, 1, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                        });
                    });
                });
                test("insert JSON value ({name: 'test', id: 1}), key (1) - existing object store (KeyPathId: none, autoincrement: false)", function () {
                    expect(1);

                    var ObjectStores = [
                         { name: "test", autoIncrement: false, Version: 1, DefaultData: [], Indexes: [] }
                    ];

                    var dbConfiguration = new Object();
                    dbConfiguration.Name = "InsertTests";
                    dbConfiguration.version = 1;
                    dbConfiguration.objectStoreConfiguration = ObjectStores;

                    stop();

                    var db = $.indexedDB("Insert Tests", dbConfiguration)
                    db.deleteDatabase(function () {
                        db.initialize(function () {
                            db.linq().from("test").insert({ name: "test", id: 1 }, 1, function (data) { ok(true, "insert successfull"); start(); }, function () { ok(false, "insert error"); start(); });
                        });
                    });
                });
            }); 
        </script>  
    </head>  
    <body>  
        <h1 id="qunit-header">Linq Test</h1>  
        <h2 id="qunit-banner"></h2>  
        <h2 id="qunit-userAgent"></h2>  
        <ol id="qunit-tests">  
        </ol>  
    </body>  
</html>  
