<!DOCTYPE html>  
<html>  
    <head> 
        <title>Tests</title> 
        <meta http-equiv="X-UA-Compatible" content="IE=edge"/>

        <link href="qunit.css" rel="stylesheet" type="text/css" />  
        <script type="text/javascript" src="../Scripts/jquery-1.7.2.js"> </script>
        <script src="qunit.js" type="text/javascript"> </script> 
        <script type="text/javascript" src="../Scripts/indexeddb.shim.js"> </script>
        <script src="../Scripts/Linq2IndexedDB.js" type="text/javascript"> </script>
        <script type="text/javascript">
            $(document).ready(function () {

                var dbName = "TestDatabase";
                var objectStoreName = "objectStore";
                var indexProperty = "name";
                var msgCreatingInitialSituationFailed = "Creating initial situation failed";

                function initionalSituation(callBack) {
                    linq2indexedDB.prototype.core.deleteDb(dbName).then(function () {
                        callBack();
                    }, function () {
                        ok(false, msgCreatingInitialSituationFailed);
                        start();
                    });
                }
                function initionalSituationDatabase(callBack) {
                    linq2indexedDB.prototype.core.deleteDb(dbName).then(function () {
                        linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                            args[0].close();
                            callBack();
                        }, function () {
                            ok(false, msgCreatingInitialSituationFailed);
                            start();
                        });
                    }, function () {
                        ok(false, msgCreatingInitialSituationFailed);
                        start();
                    });
                }
                function initionalSituationDatabaseVersion(callBack) {
                    linq2indexedDB.prototype.core.deleteDb(dbName).then(function () {
                        linq2indexedDB.prototype.core.db(dbName, 2).then(function (args) {
                            args[0].close();
                            callBack();
                        }, function () {
                            ok(false, msgCreatingInitialSituationFailed);
                            start();
                        });
                    }, function () {
                        ok(false, msgCreatingInitialSituationFailed);
                        start();
                    });
                }
                function initionalSituationObjectStore(callBack) {
                    linq2indexedDB.prototype.core.deleteDb(dbName).then(function () {
                        linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                            args[0].close();
                            callBack();
                        }, function () {
                            ok(false, msgCreatingInitialSituationFailed);
                            start();
                        }, function (args) {
                            if (args[1].type == "upgradeneeded") {
                                linq2indexedDB.prototype.core.createObjectStore(args[0], objectStoreName).then(function () {
                                }, function () {
                                    ok(false, msgCreatingInitialSituationFailed);
                                    start();
                                });
                            }
                        });
                    }, function () {
                        ok(false, "Creating initial situation failed");
                        start();
                    });
                }
                function initionalSituationIndex(callBack) {
                    linq2indexedDB.prototype.core.deleteDb(dbName).then(function () {
                        linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                            args[0].close();
                            callBack();
                        }, function () {
                            ok(false, msgCreatingInitialSituationFailed);
                            start();
                        }, function (args) {
                            if (args[1].type == "upgradeneeded") {
                                linq2indexedDB.prototype.core.createIndex(linq2indexedDB.prototype.core.createObjectStore(args[0], objectStoreName), indexProperty).then(function () {
                                }, function () {
                                    ok(false, msgCreatingInitialSituationFailed);
                                    start();
                                });
                            }
                        });
                    }, function () {
                        ok(false, "Creating initial situation failed");
                        start();
                    });
                }

                module("Database");
                asyncTest("Opening/Creating Database", 3, function () {
                    initionalSituation(function() {
                        linq2indexedDB.prototype.core.db(dbName).then(function(args) {
                            equal(args[0].name, dbName, "Database opened/created");
                            // Necessary for indexeddb who work with setVersion
                            equal(parseInt(args[0].version), 1, "Database opened/created");
                            args[0].close();
                            start();
                        }, function() {
                            ok(false, "Creating database failed");
                            start();
                        }, function(args) {
                            equal(args[1].type, "upgradeneeded", "Upgrading database");
                        });
                    });
                });
                asyncTest("Opening/Creating Database with version", 5, function () {
                    var version = 2;
                    initionalSituation(function() {
                        linq2indexedDB.prototype.core.db(dbName, version).then(function(args) {
                            equal(args[0].name, dbName, "Database opened/created");
                            equal(args[0].version, version, "Database version");
                            args[0].close();
                            start();
                        }, function() {
                            ok(false, "Creating/Opening database failed");
                            start();
                        }, function(args) {
                            equal("upgradeneeded", args[1].type, "Upgrading database");
                            equal(args[1].oldVersion, 0, "Old version");
                            equal(args[1].newVersion, version, "New version");
                        });
                    });
                });
                asyncTest("Opening existing Database", 1, function () {
                    initionalSituationDatabase(function () {
                        linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                            equal(args[0].name, dbName, "Database opened/created");
                            args[0].close();
                            start();
                        }, function () {
                            ok(false, "Creating/Opening database failed");
                            start();
                        }, function () {
                            ok(false, "Upgrading database");
                        });
                    });
                });
                asyncTest("Opening existing Database with current version", 2, function () {
                    var version = 1;
                    initionalSituationDatabase(function () {
                        linq2indexedDB.prototype.core.db(dbName, version).then(function (args) {
                            equal(args[0].name, dbName, "Database opened/created");
                            equal(args[0].version, version, "Database version");
                            args[0].close();
                            start();
                        }, function () {
                            ok(false, "Creating/Opening database failed");
                            start();
                        }, function () {
                            ok(false, "Upgrading database");
                        });
                    });
                });
                asyncTest("Opening existing Database with lower version", 1, function () {
                    var version = 1;
                    initionalSituationDatabaseVersion(function () {
                        linq2indexedDB.prototype.core.db(dbName, version).then(function (args) {
                            ok(false, "Database opened/created");
                            args[0].close();
                            start();
                        }, function () {
                            ok(true, "Creating/Opening database failed");
                            start();
                        }, function () {
                            ok(false, "Upgrading database");
                        });
                    });
                });
                asyncTest("Opening existing Database with higher version", 5, function () {
                    var version = 2;
                    initionalSituationDatabase(function () {
                        linq2indexedDB.prototype.core.db(dbName, version).then(function (args) {
                            equal(args[0].name, dbName, "Database opened/created");
                            equal(args[0].version, version, "Database version");
                            args[0].close();
                            start();
                        }, function () {
                            ok(false, "Creating/Opening database failed");
                            start();
                        }, function (args) {
                            equal("upgradeneeded", args[1].type, "Upgrading database");
                            equal(args[1].oldVersion, 1, "Old version");
                            equal(args[1].newVersion, version, "New version");
                        });
                    });
                });
                asyncTest("Deleting existing Database", 1, function () {
                    linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                        args[0].close();
                        linq2indexedDB.prototype.core.deleteDb(dbName).then(function () {
                            ok(true, "Database removed");
                            start();
                        }, function () {
                            ok(false, "Deleting database failed: ");
                            start();
                        });
                    }, function () {
                        ok(false, msgCreatingInitialSituationFailed);
                        start();
                    });
                });
                asyncTest("Deleting non existing Database", 1, function () {
                    initionalSituation(function() {
                        linq2indexedDB.prototype.core.deleteDb(dbName).then(function() {
                            ok(true, "Database removed");
                            start();
                        }, function() {
                            ok(false, "Deleting database failed");
                            start();
                        });
                    });
                });

                module("Transaction");
                asyncTest("Opening transaction", 3, function () {
                    initionalSituationObjectStore(function () {
                        linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [objectStoreName]).then(function (transArgs) {
                                ok(true, "Transaction commited");
                                transArgs[0].db.close();
                                start();
                            }, function () {
                                ok(false, "Transaction error");
                                args[0].close();
                                start();
                            }, function (transArgs) {
                                ok(true, "Transaction open");
                                // Work around for chrome, if nothing gets queried, the transaction gets aborted.
                                if (linq2indexedDB.prototype.core.implementation == linq2indexedDB.prototype.core.implementations.GOOGLE) {
                                    equal(transArgs[0].mode, "readonly");
                                    linq2indexedDB.prototype.core.objectStore(transArgs[0], objectStoreName).then(function (objArgs) {
                                        objArgs[1].get(1);
                                    });
                                } else {
                                    equal(transArgs[0].mode, linq2indexedDB.prototype.core.transactionTypes.READ_ONLY);
                                }
                            });
                        }, function () {
                            ok(false, "Database error");
                            start();
                        });
                    });
                });
                asyncTest("Opening readonly transaction", 3, function () {
                    initionalSituationObjectStore(function () {
                        linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [objectStoreName], linq2indexedDB.prototype.core.transactionTypes.READ_ONLY).then(function (transArgs) {
                                ok(true, "Transaction commited");
                                transArgs[0].db.close();
                                start();
                            }, function () {
                                ok(false, "Transaction error");
                                args[0].close();
                                start();
                            }, function (transArgs) {
                                ok(true, "Transaction open");
                                // Work around for chrome, if nothing gets queried, the transaction gets aborted.
                                if (linq2indexedDB.prototype.core.implementation == linq2indexedDB.prototype.core.implementations.GOOGLE) {
                                    equal(transArgs[0].mode, "readonly");
                                    linq2indexedDB.prototype.core.objectStore(transArgs[0], objectStoreName).then(function (objArgs) {
                                        objArgs[1].get(1);
                                    });
                                } else {
                                    equal(transArgs[0].mode, linq2indexedDB.prototype.core.transactionTypes.READ_ONLY);
                                }
                            });
                        }, function () {
                            ok(false, "Database error");
                            start();
                        });
                    });
                });
                asyncTest("Opening readwrite transaction", 3, function () {
                    initionalSituationObjectStore(function () {
                        linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [objectStoreName], linq2indexedDB.prototype.core.transactionTypes.READ_WRITE).then(function (transArgs) {
                                ok(true, "Transaction commited");
                                transArgs[0].db.close();
                                start();
                            }, function () {
                                ok(false, "Transaction error");
                                args[0].close();
                                start();
                            }, function (transArgs) {
                                ok(true, "Transaction open");
                                // Work around for chrome, if nothing gets queried, the transaction gets aborted.
                                if (linq2indexedDB.prototype.core.implementation == linq2indexedDB.prototype.core.implementations.GOOGLE) {
                                    equal(transArgs[0].mode, "readwrite");
                                    linq2indexedDB.prototype.core.objectStore(transArgs[0], objectStoreName).then(function (objArgs) {
                                        objArgs[1].get(1);
                                    });
                                } else {
                                    equal(transArgs[0].mode, linq2indexedDB.prototype.core.transactionTypes.READ_WRITE);
                                }
                            });
                        }, function () {
                            ok(false, "Database error");
                            start();
                        });
                    });
                });
                asyncTest("Aborting transaction", 2, function () {
                    initionalSituationObjectStore(function () {
                        linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [objectStoreName]).then(function (transArgs) {
                                ok(false, "Transaction commited");
                                transArgs[0].db.close();
                                start();
                            }, function (transArgs) {
                                equal(transArgs[1].type, "abort", "Transaction aborted.");
                                args[0].close();
                                start();
                            }, function (transArgs) {
                                ok(true, "Transaction open");
                                transArgs[0].abort();
                            });
                            start();
                        }, function () {
                            ok(false, "Database error");
                            start();
                        });
                    });
                });
                asyncTest("Opening transaction - without objectStore", 1, function () {
                    initionalSituation(function () {
                        linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], []).then(function (transArgs) {
                                ok(false, "Transaction commited");
                                transArgs[0].db.close();
                                start();
                            }, function (transArgs) {
                                equal(transArgs[1].name, "InvalidAccessError", "Transaction error");
                                args[0].close();
                                start();
                            }, function () {
                                ok(false, "Transaction open");
                            });
                        }, function () {
                            ok(false, "Database error");
                            start();
                        });
                    });
                });
                asyncTest("Opening transaction - non existing objectStore", 1, function () {
                    var anOtherObjectStore = "anOtherObjectStore";
                    initionalSituation(function () {
                        linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [anOtherObjectStore]).then(function (transArgs) {
                                ok(false, "Transaction commited");
                                transArgs[0].db.close();
                                start();
                            }, function (transArgs) {
                                equal(transArgs[1].name, "NotFoundError", "Transaction error");
                                args[0].close();
                                start();
                            }, function () {
                                ok(false, "Transaction open");
                            });
                        }, function () {
                            ok(false, "Database error");
                            start();
                        });
                    });
                });
                asyncTest("Opening transaction - non existing objectStore - autoGenerateAllowed", 3, function () {
                    var anOtherObjectStore = "anOtherObjectStore";
                    initionalSituation(function () {
                        linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [anOtherObjectStore], linq2indexedDB.prototype.core.transactionTypes.READ_ONLY, true).then(function (transArgs) {
                                ok(true, "Transaction commited");
                                transArgs[0].db.close();
                                start();
                            }, function () {
                                ok(false, "Transaction error");
                                args[0].close();
                                start();
                            }, function (transArgs) {
                                ok(true, "Transaction open");
                                
                                if (transArgs[0].db.objectStoreNames.contains(anOtherObjectStore)) {
                                    ok(true, "Object store present");
                                }
                                
                                // Work around for chrome, if nothing gets queried, the transaction gets aborted.
                                if (linq2indexedDB.prototype.core.implementation == linq2indexedDB.prototype.core.implementations.GOOGLE) {
                                    linq2indexedDB.prototype.core.objectStore(transArgs[0], anOtherObjectStore).then(function(objArgs) {
                                        objArgs[1].get(1);
                                    });
                                }
                            });
                        }, function () {
                            ok(false, "Database error");
                            start();
                        });
                    });
                });

                module("ObjectStores");
                asyncTest("Creating ObjectStore", 3, function () {
                    initionalSituation(function() {
                        linq2indexedDB.prototype.core.db(dbName).then(function(args) {
                            if (args[0].objectStoreNames.contains(objectStoreName)) {
                                ok(true, "Object store present");
                            }
                            args[0].close();
                            start();
                        }, function() {
                            ok(false, "Database error");
                            start();
                        }, function(args) {
                            if (args[1].type == "upgradeneeded") {
                                linq2indexedDB.prototype.core.createObjectStore(args[0], objectStoreName).then(function(objArgs) {
                                    ok(true, "Object store created");
                                    equals(objArgs[1].name, objectStoreName);
                                }, function() {
                                    ok(false, "Creating object store failed");
                                });
                            }
                        });
                    });
                });
                asyncTest("Creating ObjectStore with options", 5, function () {
                    var keyPath = "Id";
                    var autoIncrement = true;
                    initionalSituation(function() {
                        linq2indexedDB.prototype.core.db(dbName).then(function(args) {
                            if (args[0].objectStoreNames.contains(objectStoreName)) {
                                ok(true, "Object store present");
                            }
                            args[0].close();
                            start();
                        }, function() {
                            ok(false, "Database error");
                            start();
                        }, function(args) {
                            if (args[1].type == "upgradeneeded") {
                                linq2indexedDB.prototype.core.createObjectStore(args[0], objectStoreName, { keyPath: keyPath, autoIncrement: autoIncrement }).then(function(objArgs) {
                                    ok(true, "Object store created");
                                    equals(objArgs[1].name, objectStoreName, "Object store name");
                                    equals(objArgs[1].keyPath, keyPath, "Object store keyPath");
                                    if (objArgs[1].autoIncrement) {
                                        equals(objArgs[1].autoIncrement, autoIncrement, "Object store autoIncrement");
                                    } else {
                                        ok(true, "Object store autoIncrement: attribute not implemented");
                                    }
                                }, function() {
                                    ok(false, "Creating object store failed");
                                });
                            }
                        });
                    });
                });
                asyncTest("Opening ObjectStore", 1, function () {
                    initionalSituationObjectStore(function () {
                        linq2indexedDB.prototype.core.db(dbName).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [objectStoreName], linq2indexedDB.prototype.core.transactionTypes.READ_ONLY).then(function (transArgs) {
                                transArgs[0].db.close();
                                start();
                            }, function () {
                                ok(false, "Transaction error");
                                start();
                            }, function (transArgs) {
                                linq2indexedDB.prototype.core.objectStore(transArgs[0], objectStoreName).then(function (objArgs) {
                                    ok(true, "Object store open")
                                    // Work around for chrome, if nothing gets queried, the transaction gets aborted.
                                    if (linq2indexedDB.prototype.core.implementation == linq2indexedDB.prototype.core.implementations.GOOGLE) {
                                        objArgs[1].get(1);
                                    }
                                });
                            });
                        }, function () {
                            ok(false, "Database error");
                            start();
                        });
                    });
                });
                asyncTest("Deleting ObjectStore", 2, function () {
                    initionalSituationObjectStore(function() {
                        // Delete database if existing
                        linq2indexedDB.prototype.core.db(dbName, 2).then(function(args) {
                            if (!args[0].objectStoreNames.contains(objectStoreName)) {
                                ok(true, "Object store is no longer present.");
                            }
                            args[0].close();
                            start();
                        }, function() {
                            ok(false, "Database error");
                            start();
                        }, function(args) {
                            if (args[1].type == "upgradeneeded") {
                                linq2indexedDB.prototype.core.deleteObjectStore(args[0], objectStoreName).then(function() {
                                    ok(true, "Object store deleted");
                                }, function() {
                                    ok(false, "Deleting object store failed");
                                });
                            }
                        });
                    });
                });
                
                module("Indexes");
                asyncTest("Creating Index", 4, function () {
                    initionalSituationObjectStore(function () {
                        linq2indexedDB.prototype.core.db(dbName, 2).then(function(args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [objectStoreName], linq2indexedDB.prototype.core.transactionTypes.READ_ONLY).then(function(transArgs) {
                                transArgs[0].db.close();
                                start();
                            }, function() {
                                ok(false, "Transaction error");
                                start();
                            }, function(transArgs) {
                                linq2indexedDB.prototype.core.objectStore(transArgs[0], objectStoreName).then(function (objArgs) {
                                    // Work around for chrome, if nothing gets queried, the transaction gets aborted.
                                    if (linq2indexedDB.prototype.core.implementation == linq2indexedDB.prototype.core.implementations.GOOGLE) {
                                        objArgs[1].get(1);
                                    }
                                    if (objArgs[1].indexNames.contains(indexProperty + linq2indexedDB.prototype.core.indexSuffix)) {
                                        ok(true, "Index present");
                                    }
                                });
                            });
                        }, function() {
                            ok(false, "Database error");
                            start();
                        }, function(args) {
                            if (args[1].type == "upgradeneeded") {
                                linq2indexedDB.prototype.core.createIndex(linq2indexedDB.prototype.core.objectStore(args[0], objectStoreName), indexProperty).then(function(indexArgs) {
                                    ok(true, "Index created");
                                    equals(indexArgs[1].name, indexProperty + linq2indexedDB.prototype.core.indexSuffix);
                                    equals(indexArgs[1].keyPath, indexProperty);
                                }, function() {
                                    ok(false, "Creating index failed");
                                });
                            }
                        });
                    }, 1);
                });
                asyncTest("Creating Index with options", 6, function () {
                    var unique = true;
                    var multiEntry = true;
                    initionalSituationObjectStore(function () {
                        linq2indexedDB.prototype.core.db(dbName, 2).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [objectStoreName], linq2indexedDB.prototype.core.transactionTypes.READ_ONLY).then(function (transArgs) {
                                transArgs[0].db.close();
                                start();
                            }, function () {
                                ok(false, "Transaction error");
                                start();
                            }, function (transArgs) {
                                linq2indexedDB.prototype.core.objectStore(transArgs[0], objectStoreName).then(function (objArgs) {
                                    // Work around for chrome, if nothing gets queried, the transaction gets aborted.
                                    if (linq2indexedDB.prototype.core.implementation == linq2indexedDB.prototype.core.implementations.GOOGLE) {
                                        objArgs[1].get(1);
                                    }
                                    if (objArgs[1].indexNames.contains(indexProperty + linq2indexedDB.prototype.core.indexSuffix)) {
                                        ok(true, "Index present");
                                    }
                                });
                            });
                        }, function () {
                            ok(false, "Database error");
                            start();
                        }, function (args) {
                            if (args[1].type == "upgradeneeded") {
                                linq2indexedDB.prototype.core.createIndex(linq2indexedDB.prototype.core.objectStore(args[0], objectStoreName), indexProperty, {unique: unique, multiEntry: multiEntry}).then(function (indexArgs) {
                                    ok(true, "Index created");
                                    equals(indexArgs[1].name, indexProperty + linq2indexedDB.prototype.core.indexSuffix, "index name");
                                    equals(indexArgs[1].keyPath, indexProperty , "index keyPath");
                                    if (indexArgs[1].unique) {
                                        equals(indexArgs[1].unique, unique, "index unique attribute");
                                    }
                                    else {
                                        ok(true, "Index unique: attribute not implemented");
                                    }
                                    if (indexArgs[1].multiEntry || indexArgs[1].multiRow) {
                                        equals(indexArgs[1].multiEntry || indexArgs[1].multiRow, multiEntry, "index multiEntry attribute");
                                    }
                                    else {
                                        ok(true, "Index multiEntry: attribute not implemented");
                                    }
                                }, function () {
                                    ok(false, "Creating index failed");
                                });
                            }
                        });
                    }, 1);
                });
                asyncTest("Opening Index", 1, function () {
                    initionalSituationIndex(function () {
                        // Delete database if existing
                        linq2indexedDB.prototype.core.db(dbName, 2).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [objectStoreName], linq2indexedDB.prototype.core.transactionTypes.READ_ONLY).then(function (transArgs) {
                                transArgs[0].db.close();
                                start();
                            }, function () {
                                ok(false, "Transaction error");
                                start();
                            }, function (transArgs) {
                                linq2indexedDB.prototype.core.objectStore(transArgs[0], objectStoreName).then(function (objArgs) {
                                    linq2indexedDB.prototype.core.index(objArgs[1], indexProperty).then(function (indexArgs) {
                                        ok(true, "Index open");
                                        if (linq2indexedDB.prototype.core.implementation == linq2indexedDB.prototype.core.implementations.GOOGLE) {
                                            indexArgs[1].get(1);
                                        }
                                    }, function () {
                                        ok(false, "Index error");
                                        start();
                                    });
                                }, function () {
                                    ok(false, "Object store error");
                                    start();
                                });
                            });
                        }, function () {
                            ok(false, "Database error");
                            start();
                        });
                    });
                });
                asyncTest("Opening Index - non existing index", 2, function () {
                    var anotherIndex = "anotherIndex";
                    initionalSituationIndex(function () {
                        // Delete database if existing
                        linq2indexedDB.prototype.core.db(dbName, 2).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [objectStoreName], linq2indexedDB.prototype.core.transactionTypes.READ_ONLY).then(function (transArgs) {
                                transArgs[0].db.close();
                                start();
                            }, function (transArgs) {
                                equal(transArgs[1].type, "abort", "Transaction aborted");
                                start();
                            }, function (transArgs) {
                                linq2indexedDB.prototype.core.objectStore(transArgs[0], objectStoreName).then(function (objArgs) {
                                    linq2indexedDB.prototype.core.index(objArgs[1], anotherIndex).then(function () {
                                        ok(false, "Index open");
                                        start();
                                    }, function () {
                                        ok(true, "Index error");
                                        start();
                                    });
                                }, function () {
                                    ok(false, "Object store error");
                                    start();
                                });
                            });
                        }, function () {
                            ok(false, "Database error");
                            start();
                        });
                    });
                });
                asyncTest("Opening Index - non existing index - autoGenerateAllowed", 1, function () {
                    var anotherIndex = "anotherIndex";
                    initionalSituationIndex(function () {
                        // Delete database if existing
                        linq2indexedDB.prototype.core.db(dbName, 2).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [objectStoreName], linq2indexedDB.prototype.core.transactionTypes.READ_ONLY).then(function (transArgs) {
                            }, function () {
                                ok(false, "Transaction error");
                                start();
                            }, function (transArgs) {
                                linq2indexedDB.prototype.core.objectStore(transArgs[0], objectStoreName).then(function (objArgs) {
                                    linq2indexedDB.prototype.core.index(objArgs[1], anotherIndex, true).then(function (indexArgs) {
                                        ok(true, "Index open");

                                        if (linq2indexedDB.prototype.core.implementation == linq2indexedDB.prototype.core.implementations.GOOGLE) {
                                            indexArgs[1].get(1);
                                        }
                                        
                                        indexArgs[0].db.close();
                                        start();
                                    }, function () {
                                        ok(false, "Index error");
                                        start();
                                    });
                                }, function () {
                                    ok(false, "Object store error");
                                    start();
                                });
                            });
                        }, function () {
                            ok(false, "Database error");
                            start();
                        });
                    });
                });
                asyncTest("Deleting Index", 2, function () {
                    initionalSituationIndex(function () {
                        // Delete database if existing
                        linq2indexedDB.prototype.core.db(dbName, 2).then(function (args) {
                            linq2indexedDB.prototype.core.transaction(args[0], [objectStoreName], linq2indexedDB.prototype.core.transactionTypes.READ_ONLY).then(function (transArgs) {
                                transArgs[0].db.close();
                                start();
                            }, function () {
                                ok(false, "Transaction error");
                                start();
                            }, function (transArgs) {
                                linq2indexedDB.prototype.core.objectStore(transArgs[0], objectStoreName).then(function (objArgs) {
                                    // Work around for chrome, if nothing gets queried, the transaction gets aborted.
                                    if (linq2indexedDB.prototype.core.implementation == linq2indexedDB.prototype.core.implementations.GOOGLE) {
                                        objArgs[1].get(1);
                                    }
                                    if (!objArgs[1].indexNames.contains(indexProperty + linq2indexedDB.prototype.core.indexSuffix)) {
                                        ok(true, "Index is no longer present");
                                    }
                                });
                            });
                        }, function () {
                            ok(false, "Database error");
                            start();
                        }, function (args) {
                            if (args[1].type == "upgradeneeded") {
                                linq2indexedDB.prototype.core.deleteIndex(linq2indexedDB.prototype.core.objectStore(args[0], objectStoreName), indexProperty).then(function () {
                                    ok(true, "Index deleted");
                                }, function () {
                                    ok(false, "Deleting index failed");
                                });
                            }
                        });
                    }, 1);
                });
            });
        </script>  
    </head>  
    <body>  
        <h1 id="qunit-header">Linq Test</h1>  
        <h2 id="qunit-banner"></h2>  
        <h2 id="qunit-userAgent"></h2>  
        <ol id="qunit-tests">  
        </ol>  
    </body>  
</html>